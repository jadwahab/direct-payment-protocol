openapi: 3.0.0
info:
  contact: {}
  description: A protocol for communication between a payment host (usually either a
    merchant, a payment processor, or simply the recipient's wallet) and their
    customer (the sender of the funds), enabling both a better customer
    experience, simpler wallet infrastructure, more advanced features such as
    multiple outputs, and better security against man-in-the-middle attacks on
    the payment process.
  license:
    name: ISC
    url: https://tsc.bitcoinassociation.net_based_payments/
  title: Peer-to-Peer Payment Protocol (P4)
  version: 0.0.1
paths:
  "/api/v1/payment/{paymentID}":
    get:
      description: Requests the payment terms for a specific payment id which includes all the data necessary in order to create the requested payment properly.
      summary: Requests the payment terms for a specific payment id (the identifier
        for a the payment).
      tags:
        - Payment Terms
      parameters:
        - description: Payment ID
          in: path
          name: paymentID
          required: true
          schema:
            type: string
      responses:
        "201":
          description: contains outputs, merchant data and expiry information, used by the
            payee to construct a transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/p4.PaymentTerms"
        "400":
          description: returned if the sender input is invalid, usually an issue with the
            paymentID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/server.ClientError"
        "404":
          description: returned if the paymentID has not been found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/server.ClientError"
        "500":
          description: returned if there is an unexpected internal error
          content:
            application/json:
              schema:
                type: string
    post:
      description: Sends a payment based on a payment id (the identifier for an payment) and receives a PaymentACK in response to a successful Payment.
      summary: A sender will submit an Payment message including the transcation(s) along with other information that is validated before being broadcast to the network.
      tags:
        - Payment
      parameters:
        - description: Payment ID
          in: path
          name: paymentID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/p4.Payment"
        description: payment message used in BIP270
        required: true
      responses:
        "201":
          description: if success, error code will be empty, otherwise it will be filled in
            with reason
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/p4.PaymentACK"
        "400":
          description: returned if the sender input is invalid, usually an issue with the
            paymentID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/server.ClientError"
        "404":
          description: returned if the paymentID has not been found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/server.ClientError"
        "500":
          description: returned if there is an unexpected internal error
          content:
            application/json:
              schema:
                type: string
servers:
  - url: //localhost:8445
components:
  schemas:
    p4.PaymentTerms:
      type: object
      properties:
        network:
          description: Determines which Bitcoin network to be used
          enum:
            - mainnet
            - testnet
            - stn
            - regtest
          example: mainnet
          type: string
        creationTimestamp:
          description: ISO timestamp
          example: 2019-10-12T07:20:50.52Z
          type: string
        expirationTimestamp:
          description: ISO timestamp
          example: 2019-10-12T07:20:50.52Z
          type: string
        paymentUrl:
          description: Secure HTTPS location where a Payment message should be sent. Maximum length is 4000 characters
          example: https://localhost:3443/api/v1/payment/123456
          type: string
        paymentModes:
          description: Determines the mode (or multiple options) which the recipient will accept as payment - must supply at least 1.
          type: object
          properties:
            legacy:
              $ref: "#/components/schemas/pm.Legacy"
        memo:
          nullable: true
          type: string
          description: Open use, likely to be displayed when customer is approving the payment
        merchantData:
          nullable: true
          type: object
          properties:
            name:
              description: Name is a human readable string identifying the merchant.
              example: merchant 1
              type: string
            avatar:
              description: AvatarURL displays a canonical url to a merchants avatar.
              example: http://url.com
              type: string
            extendedData:
              additionalProperties: true
              description: ExtendedData can be supplied if the merchant wishes to send some
                arbitrary data back to the wallet.
              type: object
              properties:
                email:
                  description: Email can be sued to contact the merchant about this transaction.
                  example: merchant@m.com
                  type: string
                address:
                  description: Address is the merchants store / head office address.
                  example: 1 the street, the town, B1 1AA
                  type: string
    p4.Payment:
      properties:
        mode:
          description: Selects from dictionary of options within PaymentTerms.requirements
          type: string
        rawtx:
          description: RawTx represents the raw transaction bytes encoded as hexadecimal in a string format.
            request.
          type: string
        Ancestors:
          $ref: "#/components/schemas/bc.Ancestors"
        originator:
          nullable: true
          properties:
            name:
              description: legal person making the payment
              nullable: true
              type: string
            paymail:
              description: paymail for issuing refunds
              nullable: true
              type: string
            avatarUrl:
              description: url to an image
              nullable: true
              type: string
          type: object
      type: object
    p4.PaymentACK:
      properties:
        txid:
          type: string
          description: Transaction ID
        rawtx:
          type: string
          nullable: true
          description: String of raw transaction bytes in hexadecimal format
        peer_channel:
          properties:
            host:
              description: peer channel host domain or IP address
              type: string
            token:
              description: token used to authenticate the connection
              type: string
            channel_id:
              description: the identifier of the channel to connect to
              type: string
          type: object
    pm.Legacy:
      type: object
      properties:
        outputs:
          type: object
          properties:
            amount:
              description: Amount is the number of satoshis to be paid.
              example: 100000
              type: integer
            description:
              description: Description, an optional description such as "tip" or "sales tax".
                Maximum length is 100 chars.
              example: paymentReference 123456
              type: string
            script:
              description: Script is a locking script where payment should be sent, formatted
                as a hexadecimal string.
              example: 76a91455b61be43392125d127f1780fb038437cd67ef9c88ac
              type: string
        fees:
          $ref: "#/components/schemas/bt.FeeQuote"
        ancestorsArgs:
          nullable: true
          description: Determines the ancestors requirements that the receiver is requesting. If omitted, then the ancestors are not requested
          type: object
          properties:
            format:
              type: string
              description: Determines the ancestors format to be sent
              enum:
                - binary
                - json
            contents:
              type: string
              description: Determines the contenst of the ancestors to be sent. For example, the receiver can request only the parent transactions to be sent and no need to go back all the way to the anchors/proofs
              enum:
                - parents
                - 2parents
                - full
    bc.Ancestors:
      nullable: true
      type: object
      properties:
        mapiResponses:
          type: array
          items:
            properties:
              apiVersion:
                type: string
              blockHash:
                type: string
              blockHeight:
                type: integer
              callbackPayload:
                type: string
              callbackReason:
                type: string
              callbackTxId:
                type: string
              minerId:
                type: string
              timestamp:
                type: string
            type: object
        parents:
          additionalProperties:
            $ref: "#/components/schemas/bc.Ancestors"
          type: object
        proof:
          properties:
            composite:
              type: boolean
            index:
              type: integer
            nodes:
              items:
                type: string
              type: array
            proofType:
              type: string
            target:
              type: string
            targetType:
              type: string
            txOrId:
              type: string
          type: object
        rawTx:
          type: string
        txid:
          type: string
    bt.FeeQuote:
      type: object
    server.ClientError:
      properties:
        code:
          example: N01
          type: string
        id:
          example: e97970bf-2a88-4bc8-90e6-2f597a80b93d
          type: string
        message:
          example: unable to find foo when loading bar
          type: string
        title:
          example: not found
          type: string
      type: object
